#!/bin/bash
set -e

# Make disk directory
mkdir -p build/disk

# And tape
mkdir -p build/tape

# Disassemble the original binary (commented out since we are well beyond that point now)
#python starcommand.py -a >build/temp.asm
#python tools/post_process.py <build/temp.asm >starcommand_acme.asm

# Calculate the best text compression
python3 tools/text_compression.py --input source/sc_text.txt --output build/sc_text.a

function sym {
    # Look up the value of a symbol in a symbols file created by acme
    local name=$1
    local filename=$2
    grep build/$filename.symbols.txt -e '.*'$name | sed -r 's/.*\$([0-9a-f]{1,4}).*/\1/'
}

function exo_region {
    # Compress part of a binary file using Exomizer into a .exo file, extracting the start, end, load, and exec values from the symbol file
    local filename=$1
    local startsym=$2
    local endsym=$3
    local outfile=$4
    local startaddr=$(sym $startsym $filename)
    local endaddr=$(sym $endsym $filename)
    local fileaddr=$(sym load_addr $filename)
    local len=$((0x$endaddr-0x$startaddr))
    local offset=$((0x$startaddr-0x$fileaddr))
    tempfile=$(mktemp)
    dd if=build/disk/$filename bs=1 skip=$offset count=$len >$tempfile 2>/dev/null
    exomizer302 level -q ${tempfile}@0x$startaddr -o $outfile.exo
    rm -f tempfile
}

function build_exe {
    local elk=$1
    local tape=$2
    local output_filename=$3

    acme --symbollist build/$output_filename.symbols.txt -r build/$output_filename.report.txt -Delk=$elk -Dtape=$tape -o build/disk/$output_filename source/starcommand_acme.asm
    sort -o build/$output_filename.symbols.txt build/$output_filename.symbols.txt

    # Find entry point in symbols
    entry_point=$(sym entry_point $output_filename)

    # and load address
    load_addr=$(sym load_addr $output_filename)

    # free space
    free_space=$(sym free_space $output_filename)
    printf '%5d bytes free for %s\n' '0x'$free_space $output_filename

    # Create INF file
    echo "$.$output_filename     FFFF$load_addr FFFF$entry_point" >build/disk/$output_filename.inf
}

function build_tape {
    local elk=$1
    local filename=$2

    # The main binary is split into three sequential regions:
    #   load_addr -> post_reloc                 filename.3      ; the bulk of the exe (loaded last)
    #   post_reloc -> loader_copy_start         filename.2      ; enough code to spin a globe
    #   loader_copy_start -> eof                filename.1      ; initial load just to get started (includes init_early, relocates loader code, and sets an IRQ 1 handler while loading from tape)

    # Each region is compressed individually
    exo_region $filename loader_copy_start eof build/tape/$filename.1
    exo_region $filename post_reloc loader_copy_start build/tape/$filename.2
    exo_region $filename load_addr post_reloc build/tape/$filename.3

    # We assemble tape.asm, the decompression and initial loading code
    acme --symbollist build/tape.$filename.symbols.txt -r build/tape.$filename.report.txt -Delk=$1 -Dgo=\$$(sym entry_point $filename) -o build/tape/loader.$filename source/tape.asm
    sort -o build/tape.$filename.symbols.txt build/tape.$filename.symbols.txt
}

# Build !BOOT image
acme -o build/disk/\!BOOT source/boot.asm

# Create INF file for !BOOT
echo "$.!BOOT     FFFF0180 FFFF0180" >build/disk/\!BOOT.inf

# Text that appears while loading
acme -o build/text.o --setpc 0 source/sc_loader_text.txt

# Beeb disc version
build_exe 0 0 STAR
# Beeb tape version
build_exe 0 1 STAR.tape
# Elk disc version
build_exe 1 0 STARELK
# Elk tape version
build_exe 1 1 STARELK.tape

# Create new SSD file with the appropriate files
cp templates/EMPTY.ssd STAR2022.ssd
cd build/disk
python3 ../../tools/image.py -d ../../STAR2022.ssd -i !BOOT -i STAR -i STARELK
cd ../..

# prepare tape versions
mkdir -p build/tape
build_tape 0 STAR.tape
build_tape 1 STARELK.tape

# Convert tape files into UEF files
perl tools/maketape.pl build/tape/loader.STAR.tape build/tape/STAR.tape.?.exo >STAR2022.uef
perl tools/maketape.pl build/tape/loader.STARELK.tape build/tape/STARELK.tape.?.exo >STARELK.uef

if [ $USER == "tobynelson" ];
then
    # Open SSD in b2
    osascript -e 'quit app "b2 Debug"'
    sleep 1
    DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
    open -a 'b2 Debug' --args -0 "$DIR/STAR2022.SSD" -b
else
    # Open SSD in BeebEm
    open STAR2022.SSD
fi
